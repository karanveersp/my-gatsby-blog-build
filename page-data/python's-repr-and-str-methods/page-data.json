{"componentChunkName":"component---src-templates-blog-post-js","path":"/python's-repr-and-str-methods/","result":{"data":{"markdownRemark":{"id":"c64e6e0f-e1c6-553e-be94-8d976676f21a","excerpt":"Knowledge is power. Every programmer comes to appreciate that after doing their share of debugging. One of the best ways to gain knowledge about a system is to…","html":"<p><em>Knowledge is power</em>.</p>\n<p>Every programmer comes to appreciate that after doing their share of debugging.</p>\n<p>One of the best ways to gain knowledge about a system is to examine the state of the program at specific points of execution.\nStepping through the program with a debugger is great but the age old practice of printing objects in a human readable format is also effective.</p>\n<p>Most python developers would be familiar with the <code>__str__</code> method. It’s the Python equivalent of the <code>toString()</code> method in Java.\nJust like in Java, all Python objects extend a base Object class which has default implementations of common methods.</p>\n<p>Here’s an example of the default <code>__str__</code> method’s return value:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Movie</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> release_year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>release_year <span class=\"token operator\">=</span> release_year\n\ncool_movie <span class=\"token operator\">=</span> Movie<span class=\"token punctuation\">(</span><span class=\"token string\">\"The Revenant\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2015</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cool_movie<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">&lt;</span>__main__.Movie object at 0x7fe3f13bcfa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span></code></pre></div>\n<p>It’s not particularly helpful when you want to examine the state of the object. </p>\n<h2>A Readable Representation</h2>\n<p>Lets implement our own <code>__str__</code> method which overrides the default:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Movie(name=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">, release_year=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>release_year<span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span></code></pre></div>\n<p>Adding this to the class changes the output of the print function to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Movie(name=The Revenant, release_year=2015)</code></pre></div>\n<p>Much better! Now we know the object type as well as its state.</p>\n<p>Notice you didn’t have to actually invoke the <code>__str__</code> method. The\n<code>print</code> function automatically calls the <code>__str__</code> method on the object passed.</p>\n<p>There’s also a <code>__repr__</code> method which can be called on objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cool_movie<span class=\"token punctuation\">.</span>__repr__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">&lt;</span>__main__.Movie object at 0x7fe3f13dd4c<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span></code></pre></div>\n<p>This is like our default str method. So why are there two methods that return the same kind of string?</p>\n<h2>What’s the difference?</h2>\n<p>The <code>repr</code> and <code>str</code> methods can both be used for debugging. However, like in many things in Python, a convention has emerged which adds some nuance to the purpose of each.</p>\n<ul>\n<li>The point of the <code>__str__</code> method is to return a <em>human readable</em> string representation\nof the object. It doesn’t have to be a specific format, like we have it above with parentheses, and field names. Clarity is the main thing.</li>\n<li>The purpose of the <code>__repr__</code> method is also to return a human readable string, but it is expected to be more formal. In fact, the convention is to return a string which could be used to <em>construct</em> the object in that state. </li>\n</ul>\n<p>So for our example, this would qualify as a good implementation of <code>__repr__</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Movie(name=\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\",release_year=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>release_year<span class=\"token punctuation\">}</span></span><span class=\"token string\">)'</span></span></code></pre></div>\n<p>Calling <code>print(cool_movie.__repr__())</code> now gives:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Movie(name=&quot;The Revenant&quot;,release_year=2015)</code></pre></div>\n<p>Note that we used the format string with single quotes, so we could wrap the name value with double quotes to say it’s a string.</p>\n<p>The returned value is also identical to what one would type to construct a Movie instance using keyword args.</p>\n<h2>Evaluating a String into an Object</h2>\n<p>The cool thing is that the return value of the repr method can actually be passed to the <code>eval()</code> builtin function.</p>\n<p>The <code>eval()</code> function is really interesting. It <em>evaluates</em> the string passed to it as a Python expression, returning\nwhatever the expresion would return.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 + 1\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># returns 2</span></code></pre></div>\n<p>We can then try:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">movie <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>cool_movie<span class=\"token punctuation\">.</span>__repr__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Movie(name=The Revenant, release_year=2015)</span></code></pre></div>\n<p>First the <code>cool_movie.__repr__()</code> method is called, and it’s return value is then passed into the <code>eval</code> function.\nThe string happens to be a call to the <code>Movie</code> class’s constructor with specific arguments, returning a <code>Movie</code> instance.</p>\n<p>Here we make use of both the repr and str methods, one explicit and the other implicit. The output is the return value of\nthe <code>__str__</code> method.</p>\n<p>One more thing to note is that an overridden <code>__repr__</code> method is called implicitly by the <code>print</code> function if <code>__str__</code>\nhas <em>not</em> been overriden.</p>\n<p>So if our Movie class only had <code>__repr__</code> overriden, then that will be used to get the string representation. Try it!</p>\n<p>It’s good practice to override both.\nWhen things go wrong with objects, their internal state often helps understanding the problem. Making that human readable is a\npriority for the clean coder.</p>\n<p>Well that’s it for my first blog post. Happy coding!</p>","frontmatter":{"title":"Python's repr and str methods","date":"August 24, 2020","description":"Examining object state"}}},"pageContext":{"slug":"/python's-repr-and-str-methods/","previous":null,"next":null}}}