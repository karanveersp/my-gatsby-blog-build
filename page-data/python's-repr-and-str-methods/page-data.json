{"componentChunkName":"component---src-templates-blog-post-js","path":"/python's-repr-and-str-methods/","result":{"data":{"markdownRemark":{"id":"c64e6e0f-e1c6-553e-be94-8d976676f21a","excerpt":"Most python developers are quite familiar with the __str__ method. It’s the Python equivalent of the toString() method in Java.\nJust like in Java, all Python…","html":"<p>Most python developers are quite familiar with the <code>__str__</code> method. It’s the Python equivalent of the <code>toString()</code> method in Java.\nJust like in Java, all Python objects extend a base Object class which has default implementations of common methods.</p>\n<p>Here’s an example of the default <code>__str__</code> method’s return value:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Movie</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> release_year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>release_year <span class=\"token operator\">=</span> release_year\n\ncool_movie <span class=\"token operator\">=</span> Movie<span class=\"token punctuation\">(</span><span class=\"token string\">\"The Revenant\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2015</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cool_movie<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;__main__.Movie object at 0x7fe3f13bcfa0&gt;</code></pre></div>\n<p>It’s not particularly helpful when you want to see what this object represents. Just has the type of the object, and it’s\nhexadecimal location in memory.</p>\n<p>Lets implement our own <code>__str__</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Movie(name=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">, release_year=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>release_year<span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span></code></pre></div>\n<p>Adding this to the class changes the output of the print function to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Movie(name=The Revenant, release_year=2015)</code></pre></div>\n<p>Much better! Now we know the object type as well as its state.</p>\n<p>Notice you didn’t have to actually invoke the <code>__str__</code> method. The\n<code>print</code> function automatically calls the <code>__str__</code> method on the object passed.</p>\n<p>There’s also a <code>__repr__</code> method which can be called on objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cool_movie<span class=\"token punctuation\">.</span>__repr__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;__main__.Movie object at 0x7fe3f13dd4c0&gt;</code></pre></div>\n<p>This is like our default str method. So why are there two methods that return the same kind of string?</p>\n<ul>\n<li>The point of the <code>__str__</code> method is to return a <em>human readable</em> string representation\nof the object.</li>\n<li>The purpose of the <code>__repr__</code> method is to return a <em>formal, and unique</em> string representation.</li>\n</ul>\n<p>The <code>__repr__</code> method is often used for debugging, and the convention is to provide a string that a developer can use\nto <em>recreate</em> the object in that state.</p>\n<p>So for our example, this would qualify as a good implementation of <code>__repr__</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Movie(name=\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\",release_year=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>release_year<span class=\"token punctuation\">}</span></span><span class=\"token string\">)'</span></span></code></pre></div>\n<p>Calling <code>print(cool_movie.__repr__())</code> now gives:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Movie(name=&quot;The Revenant&quot;,release_year=2015)</code></pre></div>\n<p>Note that we used the format string with single quotes, so we could wrap the name value with double quotes to say it’s a string.</p>\n<p>The cool thing is that the return value of the repr method can actually be passed to the <code>eval()</code> builtin function.</p>\n<p>The <code>eval()</code> function is really interesting. It <em>evaluates</em> the string passed to it as a Python expression, returning\nwhatever the expresion would return.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 + 1\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># returns 2</span></code></pre></div>\n<p>Pretty cool! We can then try:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">movie <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>cool_movie<span class=\"token punctuation\">.</span>__repr__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Movie(name=The Revenant, release_year=2015)</span></code></pre></div>\n<p>First the <code>cool_movie.__repr__()</code> method is called, and it’s return value is then passed into the <code>eval</code> function.\nThe string happens to be a call to the <code>Movie</code> class’s constructor with specific arguments, returning a <code>Movie</code> instance.</p>\n<p>Here we make use of both the repr and str methods, one explicit and the other implicit. The output is the return value of\nthe <code>__str__</code> method.</p>\n<p>One more thing to note is that <em>an overridden</em> <code>__repr__</code> method is called implicitly by the <code>print</code> function if  <code>__str__</code>\nhas <em>not</em> been overriden.</p>\n<p>So if our Movie class only had the <code>__repr__</code> method overriden, then that will be used to get the string representation. Try it!</p>\n<p>It’s a good practice to override both, but the <code>__str__</code> method is decidely more important than the <code>__repr__</code> in daily programming.\nThe first place to look when things go wrong with objects is the object’s state, and having that be\nhuman readable is the number one priority for the clean coder.</p>\n<p>Well that’s it for my first blog post. Happy coding!</p>","frontmatter":{"title":"Python's repr and str methods","date":"July 22, 2020","description":"What are the differences?"}}},"pageContext":{"slug":"/python's-repr-and-str-methods/","previous":null,"next":null}}}
